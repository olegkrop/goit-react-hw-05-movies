{"version":3,"file":"static/js/392.2d7b5ef6.chunk.js","mappings":"+SAEMA,EAAM,mCACNC,EAAM,+BAENC,EAAiB,mCAAG,oGACHC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,uCAA+CD,IAD5C,cAClBI,EADkB,yBAEjBA,EAAOC,KAAKC,SAFK,2CAAH,qDAKvBC,QAAQC,IAAIN,KAEZ,IAAMO,EAAsB,mCAAG,WAAMC,GAAN,0EACxBA,EADwB,yCAEpB,IAFoB,uBAIRP,EAAAA,EAAAA,IAAA,UAChBF,EADgB,iCACYD,EADZ,kBACyBU,IALjB,cAIvBN,EAJuB,yBAOtBA,EAAOC,KAAKC,SAPU,2CAAH,sDAU5BC,QAAQC,IAAIC,EAAuB,SAEnC,IAAME,EAAe,mCAAG,WAAMC,GAAN,0EACjBA,EADiB,yCAEb,MAFa,uBAIDT,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA0BW,EAA1B,oBAA6CZ,IAJ5C,cAIhBI,EAJgB,yBAKfA,EAAOC,MALQ,2CAAH,sDAQrBE,QAAQC,IAAIG,EAAgB,WAE5B,IAAME,EAAe,mCAAG,WAAMD,GAAN,0EACjBA,EADiB,yCAEb,MAFa,uBAIDT,EAAAA,EAAAA,IAAA,UAChBF,EADgB,kBACHW,EADG,4BACwBZ,IALvB,cAIhBI,EAJgB,yBAOfA,EAAOC,KAAKS,MAPG,2CAAH,sDAUrBP,QAAQC,IAAIK,EAAgB,WAE5B,IAAME,EAAe,mCAAG,WAAMH,GAAN,0EACjBA,EADiB,yCAEb,MAFa,uBAIDT,EAAAA,EAAAA,IAAA,UAChBF,EADgB,kBACHW,EADG,4BACwBZ,IALvB,cAIhBI,EAJgB,yBAOfA,EAAOC,KAAKC,SAPG,2CAAH,sDAUrBC,QAAQC,IAAIO,EAAgB,U,8ICvD5B,GAAgB,KAAO,2BAA2B,UAAY,gCAAgC,OAAS,6BAA6B,KAAO,4B,SCgE3I,EA5DqB,WACnB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMX,EAAcU,EAAaE,IAAI,SAC/BC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAKf,EAAL,CAGA,IAAMgB,EAAW,mCAAG,qGACGjB,EAAAA,EAAAA,IAAuBC,GAD1B,OACZN,EADY,OAElBc,EAAUd,GAFQ,2CAAH,qDAIjBsB,GALC,CAMF,GAAE,CAAChB,IAEJ,IAAMiB,EAAiB,mCAAG,WAAMC,GAAN,uEACxBA,EAAEC,iBAEIC,EAAOF,EAAEG,cACfV,EAAgB,CAAEW,MAAOF,EAAKG,SAASC,YAAYC,QACnDL,EAAKM,QALmB,2CAAH,sDAQvB,OACE,iBAAKC,UAAWC,EAAAA,UAAhB,WACE,kBAAMD,UAAWC,EAAAA,WAAkBC,SAAUZ,EAA7C,4BAEE,kBACEU,UAAU,oBACVG,KAAK,cACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAalC,GAAe,mBAE9B,mBAAQ+B,KAAK,SAASJ,UAAWC,EAAAA,OAAjC,wBAIF,eAAID,UAAWC,EAAAA,KAAf,SACGrB,EAAO4B,KAAI,SAAAC,GACV,OACE,eAAmBT,UAAWC,EAAAA,KAA9B,UACE,SAAC,KAAD,CACES,GAAE,UAAKD,EAAME,IACbX,UAAWC,EAAAA,KACXW,MAAO,CAAEC,KAAK,GAAD,OAAK3B,EAAS4B,UAAd,OAAyB5B,EAAS6B,SAHjD,SAKGN,EAAMO,SANFP,EAAME,GAUlB,QAIR,C","sources":["api.js","webpack://goit-react-hw-05-movies/./src/components/SearchMovies/SearchMovies.module.css?b223","components/SearchMovies/SearchMovies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '650ee73e57e26be696a7074fb8f61e89';\nconst URL = 'https://api.themoviedb.org/3';\n\nconst getTrendingMovies = async () => {\n  const result = await axios.get(`${URL}/trending/movie/day?api_key=${KEY}`);\n  return result.data.results;\n};\n\nconsole.log(getTrendingMovies());\n\nconst getMoviesBySearchQuery = async searchQuery => {\n  if (!searchQuery) {\n    return [];\n  }\n  const result = await axios.get(\n    `${URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return result.data.results;\n};\n\nconsole.log(getMoviesBySearchQuery('Dune'));\n\nconst getMovieDetails = async movieId => {\n  if (!movieId) {\n    return null;\n  }\n  const result = await axios.get(`${URL}/movie/${movieId}?api_key=${KEY}`);\n  return result.data;\n};\n\nconsole.log(getMovieDetails('438631'));\n\nconst getMovieCredits = async movieId => {\n  if (!movieId) {\n    return null;\n  }\n  const result = await axios.get(\n    `${URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return result.data.cast;\n};\n\nconsole.log(getMovieCredits('438631'));\n\nconst getMovieReviews = async movieId => {\n  if (!movieId) {\n    return null;\n  }\n  const result = await axios.get(\n    `${URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return result.data.results;\n};\n\nconsole.log(getMovieReviews('438631'));\n\nexport {\n  getTrendingMovies,\n  getMoviesBySearchQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchMovies_form__Aa9iv\",\"container\":\"SearchMovies_container__+9bis\",\"button\":\"SearchMovies_button__tDOhz\",\"list\":\"SearchMovies_list__S8euj\"};","import React, { useEffect, useState } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { getMoviesBySearchQuery } from 'api';\nimport style from './SearchMovies.module.css';\n\nconst SearchMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    const fetchMovies = async () => {\n      const result = await getMoviesBySearchQuery(searchQuery);\n      setMovies(result);\n    };\n    fetchMovies();\n  }, [searchQuery]);\n\n  const handleInputSubmit = async e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.searchMovie.value });\n    form.reset();\n  };\n\n  return (\n    <div className={style.container}>\n      <form className={style.SearchForm} onSubmit={handleInputSubmit}>\n        Search a movie\n        <input\n          className=\"SearchForm__input\"\n          name=\"searchMovie\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder={searchQuery || 'Search movies'}\n        />\n        <button type=\"submit\" className={style.button}>\n          Search\n        </button>\n      </form>\n      <ul className={style.list}>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id} className={style.item}>\n              <Link\n                to={`${movie.id}`}\n                className={style.name}\n                state={{ from: `${location.pathname}${location.search}` }}\n              >\n                {movie.title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchMovies;\n"],"names":["KEY","URL","getTrendingMovies","axios","result","data","results","console","log","getMoviesBySearchQuery","searchQuery","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","fetchMovies","handleInputSubmit","e","preventDefault","form","currentTarget","query","elements","searchMovie","value","reset","className","style","onSubmit","name","type","autoComplete","autoFocus","placeholder","map","movie","to","id","state","from","pathname","search","title"],"sourceRoot":""}