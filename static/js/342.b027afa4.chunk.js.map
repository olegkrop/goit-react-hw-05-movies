{"version":3,"file":"static/js/342.b027afa4.chunk.js","mappings":"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","sources":["api.js","../node_modules/react-router-dom/dom.ts","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","webpack://goit-react-hw-05-movies/./src/components/SearchMovies/SearchMovies.module.css?b223","components/SearchMovies/SearchMovies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '650ee73e57e26be696a7074fb8f61e89';\nconst URL = 'https://api.themoviedb.org/3';\n\nconst getTrendingMovies = async () => {\n  const result = await axios.get(`${URL}/trending/movie/day?api_key=${KEY}`);\n  return result.data.results;\n};\n\nconsole.log(getTrendingMovies());\n\nconst getMoviesBySearchQuery = async searchQuery => {\n  if (!searchQuery) {\n    return [];\n  }\n  const result = await axios.get(\n    `${URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return result.data.results;\n};\n\nconsole.log(getMoviesBySearchQuery('Dune'));\n\nconst getMovieDetails = async movieId => {\n  if (!movieId) {\n    return null;\n  }\n  const result = await axios.get(`${URL}/movie/${movieId}?api_key=${KEY}`);\n  return result.data;\n};\n\nconsole.log(getMovieDetails('438631'));\n\nconst getMovieCredits = async movieId => {\n  if (!movieId) {\n    return null;\n  }\n  const result = await axios.get(\n    `${URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return result.data.cast;\n};\n\nconsole.log(getMovieCredits('438631'));\n\nconst getMovieReviews = async movieId => {\n  if (!movieId) {\n    return null;\n  }\n  const result = await axios.get(\n    `${URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return result.data.results;\n};\n\nconsole.log(getMovieReviews('438631'));\n\nexport {\n  getTrendingMovies,\n  getMoviesBySearchQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n","import type { FormEncType, FormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchMovies_form__Aa9iv\",\"container\":\"SearchMovies_container__+9bis\",\"button\":\"SearchMovies_button__tDOhz\",\"list\":\"SearchMovies_list__S8euj\"};","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesBySearchQuery } from 'api';\nimport style from './SearchMovies.module.css';\n\nconst SearchMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    const fetchMovies = async () => {\n      const result = await getMoviesBySearchQuery(searchQuery);\n      setMovies(result);\n    };\n    fetchMovies();\n  }, [searchQuery]);\n\n  const handleInputSubmit = async event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    setSearchParams({ query: form.elements.searchMovie.value });\n    form.reset();\n  };\n\n  return (\n    <div className={style.container}>\n      <form className={style.form} onSubmit={handleInputSubmit}>\n        <input\n          className=\"SearchForm__input\"\n          name=\"searchMovie\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder={searchQuery || 'Search movies'}\n        />\n        <button type=\"submit\" className={style.button}>\n          Search\n        </button>\n      </form>\n      <ul className={style.list}>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id} className={style.trendingMovies__item}>\n              to={`${movie.id}`}\n              className={style.trendingMovies__name}\n              {movie.title}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchMovies;\n"],"names":["KEY","URL","getTrendingMovies","axios","result","data","results","console","log","getMoviesBySearchQuery","searchQuery","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","setState","useLayoutEffect","listen","Router","navigationType","createRouter","val","navigator","HashRouter","createHashHistory","_ref2","HistoryRouter","_ref3","process","displayName","isBrowser","document","createElement","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","ABSOLUTE_URL_REGEX","Link","forwardRef","LinkWithRef","href","submitMethod","onSubmit","sessionStorage","setItem","useState","movies","setMovies","getElementById","callback","defaultMethod","capture","targetUrl","toLowerCase","defaultSearchParamsRef","Boolean","enableScrollRestoration","isInputElement","removeEventListener","usePrompt","_ref8","when","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchMovies","handleInputSubmit","event","preventDefault","form","currentTarget","query","elements","searchMovie","reset","className","style","name","type","autoComplete","autoFocus","placeholder","map","movie","id","title"],"sourceRoot":""}